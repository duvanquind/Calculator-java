name: Build Java Gradle

on:
  push:
    branches:
      - master
jobs:
  job1: 
      name: Build and Analyze
      runs-on: ubuntu-latest

      steps:
        - name: Checkout repository
          uses: actions/checkout@v2

        - name: Set up Java
          uses: actions/setup-java@v2
          with:
            distribution: 'adopt'
            java-version: '17'

        - uses: actions/checkout@v3
          with:
            fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

        - name: Create SonarCloud Project
          run: |
            # Configura las variables necesarias
            export SONAR_TOKEN=${{ secrets.SONAR_TOKEN }}
            export ORGANIZATION_KEY=quind-test
            export PROJECT_KEY=quind
            export PROJECT_NAME=test-calculadora
            curl -X POST -u "$SONAR_TOKEN:" \
              -d "name=$PROJECT_NAME" \
              -d "project=$PROJECT_KEY" \
              -d "organization=$ORGANIZATION_KEY" \
              "https://sonarcloud.io/api/projects/create"


        - name: Cache SonarCloud packages
          uses: actions/cache@v3
          with:
            path: ~/.sonar/cache
            key: ${{ runner.os }}-sonar
            restore-keys: ${{ runner.os }}-sonar
        - name: Cache Gradle packages
          uses: actions/cache@v3
          with:
            path: ~/.gradle/caches
            key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
            restore-keys: ${{ runner.os }}-gradle

        - name: Build and analyze
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          run: ./gradlew build sonar --info


        - name: Build with Gradle
          run: |
            chmod +x gradlew
            ./gradlew build


        - name: Publish Artifact
          uses: actions/upload-artifact@v2
          with:
            name: Artifact-$(GITHUB_REPOSITORY)
            path: build/libs/
    

  job2:
    name: Variable que se desea ver
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.tarea_uno.outputs.test }}
    env:
      Test_variable: "Así la defino en un job y la puedo utilizar en steps"

    steps:
      - name: Ejecutar y Publicar
        run: |
          echo "Hello from Job 1" >> my-variable.txt
          echo "variable en este job: $Test_variable"
      - name: Set variable
        run: echo "variable=esta variable se define en un step" >> "$GITHUB_ENV"
      - id: tarea_uno
        run: echo "::set-output name=test::CÓMO ESTÁS PUES!!!!"
      - name: use the variable
        run:  echo "Acá se ve el texto que se definió en la tarea anterior:${{ env.variable }}"
      - name: Publicar Artefacto
        uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: my-variable.txt

  job3:
    name: Variable que se ve
    runs-on: ubuntu-latest

    needs: job2

    steps:
      - env: 
          OUTPUT1: ${{needs.job2.outputs.output1}}
        run: echo $OUTPUT1
      - name: Descargar Artefacto
        uses: actions/download-artifact@v2
        with:
          name: my-artifact
      - name: Leer Variable y Mostrarla
        run: |
          cat my-variable.txt
          echo "la frase que estoy mostrando es: $Test_variable "
      - name: use the variable
        run:  echo "Acá se ve el texto que se definió en la tarea anterior:${{ env.variable }}"
  job4:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      output1: ${{ steps.step1.outputs.test }}
      output2: ${{ steps.step2.outputs.test }}
    steps:
      - id: step1
        run: echo "::set-output name=test::hello"
      - id: step2
        run: echo "::set-output name=test::world"
  job5:
    runs-on: ubuntu-latest
    needs: job4
    steps:
      - env:
          OUTPUT1: ${{needs.job4.outputs.output1}}
          OUTPUT2: ${{needs.job4.outputs.output2}}
        run: echo "$OUTPUT1 $OUTPUT2"
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: Artifact-$(github.repository)
          path: build/libs/
      - name: Arbol
        run: tree
      
      
